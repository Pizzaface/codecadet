name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if version contains pre-release identifiers
            if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          echo "Is pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  # Run full test suite
  test:
    name: Full Test Suite
    needs: validate
    uses: ./.github/workflows/ci.yml

  # Build release assets
  build:
    name: Build Release Assets
    needs: [validate, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: linux
            python_version: "3.11"
          - os: windows-latest
            asset_name: windows
            python_version: "3.11"
          - os: macos-latest
            asset_name: macos
            python_version: "3.11"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pyinstaller

      - name: Install project dependencies
        run: |
          pip install -e .

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          # Remove 'v' prefix for Python version
          PYTHON_VERSION="${VERSION#v}"
          python -c "
          import tomllib
          import tomli_w
          
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          
          data['project']['version'] = '$PYTHON_VERSION'
          
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(data, f)
          "

      - name: Build Python package
        run: |
          python -m build

      - name: Create standalone executable (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile --windowed \
            --name "GitWorktreeManager-${{ matrix.asset_name }}" \
            --add-data "assets:assets" \
            --hidden-import PySide6.QtCore \
            --hidden-import PySide6.QtGui \
            --hidden-import PySide6.QtWidgets \
            main.py

      - name: Create standalone executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed `
            --name "GitWorktreeManager-${{ matrix.asset_name }}.exe" `
            --add-data "assets;assets" `
            --hidden-import PySide6.QtCore `
            --hidden-import PySide6.QtGui `
            --hidden-import PySide6.QtWidgets `
            --icon "assets/icon.png" `
            main.py

      - name: Create release archive (Ubuntu/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd dist
          tar -czf "GitWorktreeManager-${{ needs.validate.outputs.version }}-${{ matrix.asset_name }}.tar.gz" \
            GitWorktreeManager-${{ matrix.asset_name }} \
            *.whl *.tar.gz

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          7z a "GitWorktreeManager-${{ needs.validate.outputs.version }}-${{ matrix.asset_name }}.zip" `
            "GitWorktreeManager-${{ matrix.asset_name }}.exe" `
            *.whl *.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-assets-${{ matrix.asset_name }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.whl

  # Create GitHub release
  release:
    name: Create GitHub Release
    needs: [validate, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-assets

      - name: Prepare release assets
        run: |
          mkdir -p final-assets
          find release-assets -name "*.tar.gz" -o -name "*.zip" -o -name "*.whl" | \
            xargs -I {} cp {} final-assets/
          ls -la final-assets/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 🚀 Git Worktree Manager $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📋 Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 📦 Assets" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Linux**: \`GitWorktreeManager-$VERSION-linux.tar.gz\`" >> release_notes.md
          echo "- **Windows**: \`GitWorktreeManager-$VERSION-windows.zip\`" >> release_notes.md
          echo "- **macOS**: \`GitWorktreeManager-$VERSION-macos.tar.gz\`" >> release_notes.md
          echo "- **Python Package**: \`*.whl\` files for pip installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Standalone Executables" >> release_notes.md
          echo "Download the appropriate archive for your platform and extract it." >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Python Package" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install GitWorktreeManager-*.whl" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🐛 Bug Reports" >> release_notes.md
          echo "Please report issues at: https://github.com/your-org/git-worktree-manager/issues" >> release_notes.md
          
          # Set output for GitHub Actions
          {
            echo 'RELEASE_NOTES<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Git Worktree Manager ${{ needs.validate.outputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          files: final-assets/*
          generate_release_notes: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    needs: [validate, release]
    runs-on: ubuntu-latest
    if: needs.validate.outputs.is_prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/multi-claude-coding
    permissions:
      id-token: write
    steps:
      - name: Download Python packages
        uses: actions/download-artifact@v3
        with:
          name: release-assets-linux
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    needs: [validate, release]
    runs-on: ubuntu-latest
    if: always() && needs.release.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release summary
        run: |
          echo "## 🎉 Release ${{ needs.validate.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Tasks:" >> $GITHUB_STEP_SUMMARY
          echo "- Version validation and tagging" >> $GITHUB_STEP_SUMMARY
          echo "- Full test suite execution" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-platform asset building" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release creation" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate.outputs.is_prerelease }}" = "false" ]; then
            echo "- PyPI package publication" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Download Assets](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }})" >> $GITHUB_STEP_SUMMARY

      - name: Notify success
        run: |
          echo "🚀 Release ${{ needs.validate.outputs.version }} has been successfully created and published!"
