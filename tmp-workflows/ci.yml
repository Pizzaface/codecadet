name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: "3.11"

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]

      - name: Check TOML syntax
        run: |
          python -c "import tomllib; f=open('pyproject.toml','rb'); tomllib.load(f); print('âœ… TOML syntax is valid')"

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure

      - name: Check code formatting with Black
        run: |
          black --check --diff .

      - name: Run Ruff linting
        run: |
          ruff check . --output-format=github

      - name: Run MyPy type checking
        run: |
          mypy . --show-error-codes --pretty

  # Test Matrix
  test:
    name: Test Suite
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
        include:
          # Add specific configurations for different OS/Python combinations
          - os: ubuntu-latest
            python-version: "3.11"
            coverage: true
          - os: windows-latest
            python-version: "3.12"
            coverage: false
          - os: macos-latest
            python-version: "3.13"
            coverage: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-pip-

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y git xvfb

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install git

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Install development dependencies
        if: matrix.coverage == true
        run: |
          pip install -e .[dev]

      - name: Run tests with coverage (Ubuntu Python 3.11)
        if: matrix.coverage == true
        env:
          NO_COLOR: 1
        run: |
          xvfb-run -a pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=25

      - name: Run tests without coverage
        if: matrix.coverage != true
        env:
          NO_COLOR: 1
        run: |
          pytest tests/ -v --tb=short

      - name: Upload coverage reports to Codecov
        if: matrix.coverage == true
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: dist/

  # Integration Tests (if applicable)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run integration tests
        env:
          NO_COLOR: 1
        run: |
          pytest tests/ -v -m integration --tb=short || echo "No integration tests found"

  # Deployment readiness check
  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-packages
          path: dist/

      - name: Verify package installation
        run: |
          python -m pip install --upgrade pip
          pip install dist/*.whl
          python -c "import sys; print('Package installed successfully')"

      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Tests passed on multiple platforms" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Package built and verified" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸš€ Ready for deployment" >> $GITHUB_STEP_SUMMARY
